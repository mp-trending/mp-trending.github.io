extends /layout/liff

block beforehtml
  -
    title = '寫寫小卡'
    description = '寫寫小卡'

block style
  meta(property="og:image:height", content="600")
  meta(property="og:image:width", content="1200")
  meta(property="og:image", content="https://i.imgur.com/jZdoYSj.png")
  meta(property="og:url", content=`https://liff.line.me/${liffidCard}/card-modal.html`)
  style
    :sass
      [v-cloak]
        display: none
      body
        background: fixed rgba(231,254,248,1) center bottom no-repeat
        background-image: url('https://i.imgur.com/wAmC1XD.png')
      .card
        border: 1px solid #abfecc
        box-shadow: 0 2px 3px rgba(40,70,20, 0.15)
      .card-img
        aspect-ratio: 1/1
        background: no-repeat center/100%
        height: 0
        overflow: hidden
        padding-bottom: 100%
      .btn-img
        border: 1px solid #dddddd
        position: relative
        i.fa
          color: #00894a
          position: absolute
          right: 0px
          top: 0px
      .btn:focus
        border: 1px solid #dddddd
        box-shadow: none
      .btn.selected
        border: solid 3px #00894a
        box-shadow: none

block content
  #app.container.my-4.text-monospace(v-cloak, style="max-width: 562.5px")
    .activity-item(v-if="page === 'init'")
      h4.mb-4.text-center {{item.card_title}}
      img.mb-2.w-100(:src="item.cover_image", :key="'img-mission'")
      template(v-if="toggle.status")
        .card
          .card-body
            h5.text-center.font-weight-bold {{item.choose_image_text}}
            #card.mb-3
              .row.mx-n1(v-for="(chunk, cId) of _.chunk(item.image, 2)" :key="`row-${cId}`")
                .col-6.p-2(v-for="imgur of chunk" :key="imgur")
                  button.btn.btn-img.p-0.w-100(:class="{'selected': selected === imgur}", @click="btnSelect(imgur)")
                    .card-img.w-100(:style="{'background-image': `url('${imgur}')`}")
                    i.fa.m-1.p-0(:class="selected === imgur ? 'fa-check-circle-o' : 'fa-circle-o'")
            .form-group.m-0
              textarea.form-control(:placeholder="item.share_input_text", v-model="text")
        button.btn.btn-lg.btn-block.btn-success.mt-3(type="button", @click="btnShare", :disabled="!selected || !text") {{item.share_button}}
      .card(v-else)
        p.text-center.my-2 非活動期間
    .d-flex.min-vh-100.justify-content-center.align-items-center(v-else)
      h3.text-center 載入中請稍候…

block script
  include /component/helpers.pug
  script.
    const loginPromise = (async () => {
      await liff.init({ liffId: '#{liffidCard}' })
      if (!liff.isLoggedIn()) {
        liff.login({ redirectUri: location.href })
        return await new Promise(resolve => {}) // 永遠不會結束的 Promise
      }
      let profile = {}
      try {
        profile = await liff.getProfile()
        gtag('set', 'user_id', profile.userId)
      } catch (err) {
        err.message = _.get(err, 'response.data.message', err.message)
        console.error(window.errToPlainObj(err))
      }
      return profile
    })()
    const IMAGE_MAX = 8 // 最多 8 張圖
    window.vm = new Vue({
      el: '#app',
      data: {
        activity: '',
        item: {},
        msgs: null,
        page: '',
        selected: null,
        text: '',
        toggle: {},
      },
      async mounted () {
        this.showLoading('請稍候', '正在載入網頁')
        // 自動儲存功能
        try {
          const saved = JSON.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'h', { ...this.h, ...saved })
        } catch (err) {}
        this.$watch('h', () => {
          localStorage.setItem(location.pathname, JSON.stringify(this.h))
        }, { deep: true })

        await this.init()
      },
      methods: {
        async init () {
          try {
            await loginPromise
            this.activity = this.param('activity')
            if (_.isNil(this.activity)) throw new Error('小卡連結失效')
            await Promise.all([
              this.getData(),
              this.initGtag(),
              this.initTpl(),
            ])
            this.page = 'init'
            this.hideLoading()
          } catch (err) {
            err.message = _.get(err, 'response.data.message', err.message)
            console.error(window.errToPlainObj(err))
            await Swal.fire({ icon: 'error', title: '網頁讀取失敗', text: err.message })
            location.reload()
          }
        },
        async getData () {
          const csv = await window.getCsv('https://docs.google.com/spreadsheets/d/e/2PACX-1vT4l_mlqJfp_u1qNV0MNiwaGVIDpB6mgIhT0HlZwS_nUZtdq148QFGV-ROQhOeTwlour8bczwF-OO1M/pub?gid=0&single=true&output=csv')
          this.$set(this, 'item', _.take(_.filter(csv, ['name', this.activity]))[0])
          if (_.isNil(this.item)) throw new Error('小卡連結失效')
          this.item.image = _.take(_.uniq(_.filter(_.map(_.get(this.item, 'image', '').split('\n'), _.trim))), IMAGE_MAX)

          const now = new Date()
          const ended = now >= new Date(this.item.end_time)
          const started = now >= new Date(this.item.start_time)
          this.$set(this, 'toggle', {
            ended,
            started,
            status: started && !ended,
          })
        },
        async initGtag () {
          await loginPromise
          const referral = this.param('referral', null)
          const campaign = this.activity
          gtag('event', 'screen_view', { screen_name: `name=${campaign},module=小卡片,source=${this.param('source', '未知')},` })
          gtag('event', 'join_group', { group_id: campaign }) // 參加活動
          if (referral) gtag('event', 'campaign_referral', { campaign, line_id: referral })
        },
        async initTpl () {
          const tpl = '/tpl/card-modal.txt'
          const render = _.template(_.get(await axios.get(tpl, {
            params: { cachebust: Date.now() },
            transformResponse: [],
          }), 'data'))
          this.render = options => render({ _, dayjs, Qs, ...options })
        },
        async btnShare () {
          try {
            this.showLoading('請稍候', '正在開啟分享畫面')
            if (!liff.isApiAvailable('shareTargetPicker')) throw new Error('您的裝置不支援此功能，請嘗試重新開啟此頁面或更新應用程式版本。')
            const profile = await loginPromise

            const share = new URL(liff.permanentLink.createUrl())
            share.searchParams.set('referral', profile.userId)
            share.searchParams.set('source', 'friend')

            const msgs = this.getRenderedMsgs({
              data: this.item,
              imgur: this.selected,
              profile,
              share: share.href,
              text: this.text,
            })
            const beforeShare = Date.now()
            const res = await liff.shareTargetPicker(msgs)
            const afterShare = Date.now()
            if (afterShare - beforeShare > 1000 && _.get(res, 'status') !== 'success') throw new Error('您已取消分享')
            gtag('event', 'share', {
              campaign: this.activity,
              content_type: this.selected,
              item_id: this.text.slice(0, 100),
            })
            await Swal.fire({ icon: 'success', title: '送出成功', text: this.item.success_text })
          } catch (err) {
            err.message = _.get(err, 'response.data.message', err.message)
            console.error(window.errToPlainObj(err))
            await Swal.fire({ icon: 'error', title: '送出失敗', text: err.message })
          }
        },
        async btnSelect (imgur) {
          const result = await Swal.fire({
            cancelButtonText: '關閉',
            confirmButtonText: '選擇',
            imageUrl: imgur,
            showCancelButton: true,
            customClass: {
              header: 'px-0',
              image: 'my-0',
            },
          })
          if (!result.value) return
          this.$set(this, 'selected', imgur)
        },
        getRenderedMsgs (options) {
          let msg = this.render(options)
          console.log(msg)
          msg = JSON5.parse(msg)
          if (_.includes(['bubble', 'carousel'], _.get(msg, 'type'))) {
            msg = { type: 'flex', altText: this.$t('flexAltText'), contents: msg }
          }
          msg = _.castArray(msg)
          return msg
        },
        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
        hideLoading () {
          Swal.close()
        },
        param (key, defaultValue) {
          const val = new URL(location).searchParams.get(key)
          return _.isNil(val) ? defaultValue : val
        },
      },
    })

