extends /layout/liff

block beforehtml
  -
    title = '臺北市立兒童新樂園'
    description = '臺北市立兒童新樂園。'

block style
  meta(property="og:url", content=`https://liff.line.me/${liffidFull}/tcap-share.html`)
  style
    :sass
      body
        background-color: #F2F6F9

block script
  include /component/helpers.pug
  script.
    const loginPromise = (async () => {
      await liff.init({ liffId: '#{liffidFull}' })
      if (!liff.isLoggedIn()) {
        liff.login({ redirectUri: location.href })
        return await new Promise(resolve => {}) // 永遠不會結束的 Promise
      }
      let profile = {}
      try {
        profile = await liff.getProfile()
        gtag('set', 'user_id', profile.userId)
      } catch (err) {
        console.error(window.errToPlainObj(err))
      }
      return profile
    })()
    window.vm = new Vue({
      el: '#app',
      data: {},
      async mounted () {
        try {
          // 儲存 redirect 參數
          const redirect = this.paramBase64url('redirect')
          if (redirect) localStorage.setItem('tcap-redirect', redirect)

          await this.initTpl()
          await this.init()
        } catch (err) {
          console.error(window.errToPlainObj(err))
          await Swal.fire({ icon: 'error', title: '網頁讀取失敗', text: err.message })
        }
      },
      methods: {
        async init () {
          this.showLoading('請稍候', '載入中')
          await loginPromise
          await this.btnShare()
          const redirect = new URL(localStorage.getItem('tcap-redirect') || '../tcap/page-1-4.html', location).href
          localStorage.removeItem('tcap-redirect')
          liff.openWindow({ external: true, url: redirect })
        },
        async initTpl () {
          const tpl = new URL('../tpl/tcap-share.txt', location).href
          const render = _.template(_.get(await axios.get(tpl, {
            params: { cachebust: Date.now() },
            transformResponse: [],
          }), 'data'))
          this.render = options => render({ _, dayjs, Qs, ...options })
        },
        async btnShare () {
          try {
            this.showLoading('請稍候', '正在開啟分享畫面')
            if (!liff.isApiAvailable('shareTargetPicker')) throw new Error('您的裝置不支援此功能，請嘗試重新開啟此頁面或更新應用程式版本。')
            const profile = await loginPromise
            const msgs = this.getRenderedMsgs({
              profile,
              url: new URL('../tcap/page-6-1.html?openExternalBrowser=1', location).href,
            })
            const beforeShare = Date.now()
            const res = await liff.shareTargetPicker(msgs)
            const afterShare = Date.now()
            if (afterShare - beforeShare > 1000 && _.get(res, 'status') !== 'success') throw new Error('您已取消分享')
            await Swal.fire({ icon: 'success', title: '分享行程成功', text: '祝你們玩得愉快' })
          } catch (err) {
            err.message = _.get(err, 'response.data.message', err.message)
            console.error(window.errToPlainObj(err))
            await Swal.fire({ icon: 'error', title: '分享行程失敗', text: err.message })
          }
        },
        getRenderedMsgs (options) {
          let msg = this.render(options)
          console.log(msg)
          msg = JSON5.parse(msg)
          if (_.includes(['bubble', 'carousel'], _.get(msg, 'type'))) {
            msg = { type: 'flex', altText: this.$t('flexAltText'), contents: msg }
          }
          msg = _.castArray(msg)
          return msg
        },
        paramBase64url (key, defaultValue) {
          const val = new URL(location).searchParams.get(key)
          return _.isNil(val) ? defaultValue : window.decodeBase64url(val)
        },
        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
      },
    })

