extends /layout/default

block beforehtml
  -
    const title = 'COVID-19 中醫視訊診療地圖'
    const description = 'COVID-19 中醫視訊診療地圖'

block style
  meta(name="description" content=description)
  meta(property="og:description", content=description)
  link(rel="stylesheet", href="https://unpkg.com/leaflet@1/dist/leaflet.css")
  link(rel="stylesheet", href="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.css")
  link(rel="stylesheet", href="https://unpkg.com/leaflet.markercluster@1/dist/MarkerCluster.css")
  link(rel="stylesheet", href="https://unpkg.com/leaflet.markercluster@1/dist/MarkerCluster.Default.css")
  style
    :sass
      [v-cloak]
        display: none
      html, body, #app, #map
        height: 100%
        width: 100vw
      #app
        position: relative
      #layer-visible
        background-color: white
        padding: .3rem .5rem
        position: absolute
        right: 10px
        top: 10px
      .custom-control-label
        font-size: 14px
      .unselectable
        -webkit-user-select: none
        -moz-user-select: none
        -ms-user-select: none
        user-select: none
      .leaflet-popup-content
        font-size: 14px
        h6
          font-size: 18px
        .table-popup
          th
            padding: 0.3rem 0rem
            white-space: nowrap
      .location-circle-tooltip
        &.leaflet-tooltip
          background: transparent
          border: none
          box-shadow: none
        &.leaflet-tooltip-top:before
          border: none
      .marker-cluster-testkits
        background-color: rgba(248, 208, 121, 0.6)
        >div
          background-color: rgba(248, 208, 121, 0.6)
      .marker-cluster-tcms
        background-color: rgba(113, 191, 122, 0.6)
        >div
          background-color: rgba(113, 191, 122, 0.6)
      .marker-cluster-tcmTelemedicines
        background-color: rgba(117, 202, 229, 0.6)
        >div
          background-color: rgba(117, 202, 229, 0.6)
block content
  #app(v-cloak)
    #layer-visible.leaflet-bar.leaflet-control.unselectable.text-monospace(v-if="_.keys(visible).length")
      .d-flex.custom-control.custom-switch(v-for="(v, k) in visible", :key="k", v-if="open")
        input.custom-control-input(type="checkbox", v-model="visible[k]", :id="`switch-layer-${k}`")
        label.custom-control-label.my-ayto(:for="`switch-layer-${k}`") {{ nameMap[k] }}
      .d-flex.border-top.mt-1.pt-1(@click="open = !open"): small.mx-auto {{ open ? '收合' : '展開' }}
    #map

block script
  script(crossorigin="anonymous", src="https://unpkg.com/@hapi/joi@17/dist/joi-browser.min.js")
  script(crossorigin="anonymous", src="https://unpkg.com/leaflet@1/dist/leaflet.js")
  script(crossorigin="anonymous", src="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.js")
  script(crossorigin="anonymous", src="https://unpkg.com/leaflet.markercluster@1/dist/leaflet.markercluster.js")
  script(crossorigin="anonymous", src="https://unpkg.com/papaparse@5/papaparse.min.js")
  script.
    let map
    window.httpBuildQuery = obj => Qs.stringify(obj, { arrayFormat: 'brackets' })
    window.sleep = t => new Promise(resolve => { setTimeout(resolve, t) })
    window.vm = new Vue({
      el: '#app',
      data: {
        nameMap: {
          tcms: '清冠一號自費(中醫)',
          tcmTelemedicines: '視訊診療/清冠一號公費(中醫)',
          testkits: '新冠肺炎快篩試劑銷售',
        },
        mapZoom: 15,
        open: true,
        visible: {},
      },
      async mounted () {
        try {
          this.initMap()
          this.init()
        } catch (err) {}
      },
      methods: {
        async initMap () {
          const tiles = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/light_all/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attribution">CARTO</a>',
          })
          map = L.map('map', {
            center: [24.1591423, 120.6396484], // 微程式資訊
            zoom: 15,
            layers: [tiles],
            tap: false, //- https://github.com/Leaflet/Leaflet/issues/3184
          })
          window.Lcontrol = L.control.locate({
            position: 'topleft',
            strings: { title: '定位目前所在位置', popup: '定位目前所在位置' },
          }).addTo(map)
          map.on('zoomend', () => { this.mapZoom = map.getZoom() })
        },
        async init () {
          this.showLoading('讀取中', '請稍候')
          const [tcms, tcmTelemedicines, testkits, testkitsAll] = await Promise.all([
            this.getTcms('https://docs.google.com/spreadsheets/d/e/2PACX-1vT8DLtC15TFAUZouFmbL6KrqTKSrMdYKPaMAHNQs2wZIvYcicKzw_z37qREC2Ae-OfFliL3wG0ktzqy/pub?gid=883665019&single=true&output=csv'),
            this.getTcms('https://docs.google.com/spreadsheets/d/e/2PACX-1vT8DLtC15TFAUZouFmbL6KrqTKSrMdYKPaMAHNQs2wZIvYcicKzw_z37qREC2Ae-OfFliL3wG0ktzqy/pub?gid=1114924453&single=true&output=csv'),
            this.getTestkits(),
            this.getTestkitsAll(),
          ])

          await this.renderMap({
            tcms,
            tcmTelemedicines,
            testkits: _.uniqBy([...testkits, ...testkitsAll], 'id'),
          })
          Swal.close()
        },
        async renderMap (datas) {
          console.log(datas)
          const saved = window.parseJsonOrDefault(localStorage.getItem('covid19-maps-visible'), {})

          const toTel = phone => `tel:${phone.replace(/^[(]*(\d+)[)\s-]*(\d+)$/, '$1-$2')}`
          const toGoogleMap = i => {
            const baseUrl = 'https://www.google.com/maps/dir/?'
            const query = {
              api: 1,
              destination: `${i.lat},${i.lng}`,
              travelmode: 'walking',
            }
            return baseUrl + window.httpBuildQuery(query)
          }

          const itemPopup = (item, type) => {
            if (type === 'testkits') { // 快篩試劑
              return `<h6 class="mb-0 text-center font-weight-bold">${item.name}</h6><hr class="my-2">
              <div class="text-monospace">
                <p class="mt-0 mb-2"><strong>快篩試劑：</strong>${item.label}<span class="badge badge-pill badge-success ml-1">${item.count}</span></p>
                <table class="mb-2 table table-sm table-borderless table-popup text-monospace">
                  ${item.phone ? `<tr><th>電話：</th><td><a href="${toTel(item.phone)}">${item.phone}</a></td></tr>` : ''}
                  <tr><th>地址：</th><td>${item.address}</td></tr>
                  ${item.ps ? `<tr><th>備註：</th><td>${item.ps}</td></tr>` : ''}
                  <tr><th>更新：</th><td>${item.updated_at || '未知'}</td></tr>
                </table>
                <a class="btn btn-dark btn-sm btn-block text-white my-auto btn-block", href="${toGoogleMap(item)}", target="_blank">Google 導航</a>
              </div>`
            } else if (type === 'tcmTelemedicines') { // 中醫視訊看診
              return `<h6 class="mb-0 text-center font-weight-bold">${item.name}</h6><hr class="my-2">
              <div class="text-monospace">
                <p class="mt-0 mb-2 text-center text-danger font-weight-bold">視訊診療，經醫師診斷開立清冠一號(公費)</p>
                ${item.phone ? `<p class="mt-0 mb-2"><strong>電話：</strong><a href="${toTel(item.phone)}">${item.phone}</a></p>` : ''}
                <p class="mt-0 mb-2"><strong>地址：</strong>${item.address}</p>
                <a class="btn btn-dark btn-sm btn-block text-white my-auto btn-block", href="${toGoogleMap(item)}", target="_blank">Google 導航</a>
              </div>`
            } else if (type === 'tcms') { // 中醫清冠一號
              return `<h6 class="mb-0 text-center font-weight-bold">${item.name}</h6><hr class="my-2">
              <div class="text-monospace">
                <p class="mt-0 mb-2 text-center text-danger font-weight-bold">看診後可開立清冠一號（自費）</p>
                ${item.phone ? `<p class="mt-0 mb-2"><strong>電話：</strong><a href="${toTel(item.phone)}">${item.phone}</a></p>` : ''}
                <p class="mt-0 mb-2"><strong>地址：</strong>${item.address}</p>
                <a class="btn btn-dark btn-sm btn-block text-white my-auto btn-block", href="${toGoogleMap(item)}", target="_blank">Google 導航</a>
              </div>`
            }
          }
          _.each(datas, async (items, type) => {
            const className = `marker-cluster marker-cluster-${type}`
            const cluster = L.markerClusterGroup({
              chunkedLoading: true,
              disableClusteringAtZoom: 15,
              spiderfyOnMaxZoom: false,
              iconCreateFunction: cluster => {
                return new L.DivIcon({
                  className,
                  html: `<div><span>${cluster.getChildCount()}</span></div>`,
                  iconSize: new L.Point(40, 40),
                })
              },
            }).addLayers(_.map(items, item => {
              const marker = L.marker([item.lat, item.lng], { icon: this.getIcon(item, type) })
                .bindPopup(itemPopup(item, type), { minWidth: 200 })
              return marker
            }))
            this.$set(this.visible, type, false)
            this.$watch(`visible.${type}`, (newVal, oldVal) => {
              const hasLayer = map.hasLayer(cluster)
              if (hasLayer ^ newVal) {
                map[newVal ? 'addLayer' : 'removeLayer'](cluster)
                localStorage.setItem('covid19-maps-visible', JSON.stringify(this.visible))
              }
            })
            if (_.get(saved, type, true)) this.$set(this.visible, type, true)
          })
          window.Lcontrol.start()
        },
        getIcon (item, type) {
          // Add marker
          const ICON = L.Icon.extend({
            options: {
              iconAnchor: [20, 37],
              iconSize: [40, 40],
              popupAnchor: [0, -40],
            },
          })
          const icons = {
            empty: new ICON({ iconUrl: 'https://i.imgur.com/0l2UUsV.png' }),
            tcms: new ICON({ iconUrl: 'https://i.imgur.com/k8FGfkB.png' }),
            tcmTelemedicines: new ICON({ iconUrl: 'https://i.imgur.com/Dty9gl7.png' }),
            testkits: new ICON({ iconUrl: 'https://i.imgur.com/cRX1iko.png' }),
          }

          if (type !== 'testkits') return icons[type]
          if (_.get(item, 'count', 0)) return icons.empty
          return icons.testkits
        },
        async getTestkits () {
          const rows = await this.getCsv('https://data.nhi.gov.tw/resource/Nhi_Fst/Fstdata.csv')
          return _.filter(await Promise.all(_.map(rows, async row => {
            try {
              row = {
                address: row['醫事機構地址'],
                count: row['快篩試劑截至目前結餘存貨數量'],
                id: row['醫事機構代碼'],
                label: row['廠牌項目'],
                lat: row['緯度'],
                lng: row['經度'],
                name: row['醫事機構名稱'],
                phone: row['醫事機構電話'],
                ps: row['備註'],
                updated_at: row['來源資料時間'],
              }
              return await joi.object({
                address: joi.string().empty('').optional(),
                count: joi.number().integer().min(0).default(0).empty(''),
                id: joi.string().required(),
                label: joi.string().empty('').required(),
                lat: joi.number().min(21).max(28).empty('0').required(),
                lng: joi.number().min(117).max(123).empty('0').required(),
                name: joi.string().empty('').required(),
                phone: joi.string().empty('').optional(),
                ps: joi.string().empty('').optional(),
                updated_at: joi.string().regex(/^\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}/).required(),
              }).validateAsync(row, { stripUnknown: true })
            } catch (err) {
              console.error(err)
              return null
            }
          })))
        },
        async getTcms (csv) {
          if (!csv) return []
          const rows = await this.getCsv(csv)
          return _.filter(await Promise.all(_.map(rows, async row => {
            try {
              row = _.pick(row, ['address', 'lat', 'lng', 'name', 'phone'])
              return await joi.object({
                address: joi.string().empty('').optional(),
                lat: joi.number().min(21).max(28).empty('0').required(),
                lng: joi.number().min(117).max(123).empty('0').required(),
                name: joi.string().empty('').required(),
                phone: joi.string().empty('').optional(),
              }).validateAsync(row, { stripUnknown: true })
            } catch (err) {
              console.log(`解析格式錯誤: ${row}, 錯誤訊息: ${err}`)
              console.error(err)
              return null
            }
          })))
        },
        async getTestkitsAll () {
          const rows = await this.getCsv('https://taichunmin.idv.tw/covid19-testkit-maps-crawler/stores0430.csv')
          return _.map(rows, row => ({
            address: row.addr,
            count: 0,
            id: row.id,
            label: row.testkit,
            lat: row.lat,
            lng: row.lng,
            name: row.name,
            phone: row.tel,
            ps: row.notice,
            total: row.amount,
          }))
        },
        async getCsv (url, cachetime = 3e4) {
          const csv = _.trim(_.get(await axios.get(url, {
            params: { cachebust: _.floor(Date.now() / cachetime) },
          }), 'data'))
          return _.get(Papa.parse(csv, {
            encoding: 'utf8',
            header: true,
          }), 'data', [])
        },
        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
      },
    })
